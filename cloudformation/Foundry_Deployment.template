{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Run FoundryVTT on EC2 with LetsEncrypt SSL support.",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [
				{
					"Label": {
						"default": "Foundry Configuration"
					},
					"Parameters": [
						"FoundryDownloadLink",
						"AdminUserName",
						"AdminUserPW"
					]
				},
				{
					"Label": {
						"default": "Domain and SSL Configuration"
					},
					"Parameters": [
						"FullyQualifiedDomainName",
						"SubdomainName",
						"WebServerBool",
						"ConfigureRoute53Bool"
					]
				},
				{
					"Label": {
						"default": "SSL Configuration"
					},
					"Parameters": [
						"UseLetsEncryptSSL",
						"Email"
					]
				},
				{
					"Label": {
						"default": "Server Instance"
					},
					"Parameters": [
						"InstanceKey",
						"InstanceType",
						"AMI",
						"UseFixedIP",
						"SshAccessIP"
					]
				},
				{
					"Label": {
						"default": "Storage and Backup"
					},
					"Parameters": [
						"UseExistingS3Bucket",
						"S3BucketName",
						"TakeSnapshots",
						"SnapshotFrequency"
					]
				}
			]
		}
	},
	"Parameters": {
		"FoundryDownloadLink": {
			"Type": "String",
			"Description": "Your personal link to download Foundry. Specify either a Patreon link, or a publicly shared Google Drive link.",
			"AllowedPattern" : ".+"
		},
		"AdminUserName": {
			"Type": "String",
			"Description": "Username to be used for the Foundry admin user.",
			"AllowedPattern" : "[A-Za-z]+",
			"Default": "FoundryAdmin"
		},
		"AdminUserPW": {
			"Type": "String",
			"Description": "Have a minimum of 8 characters and a maximum of 128 characters include a minimum of three of the following mix of character types: uppercase, lowercase, numbers, and symbols.",
			"ConstraintDescription": "Have a minimum of 8 characters and a maximum of 128 characters include a minimum of three of the following mix of character types: uppercase, lowercase, numbers, and symbols.",
			"AllowedPattern" : ".{8,128}",
			"NoEcho": "True"
		},
		"FullyQualifiedDomainName": {
			"Type": "String",
			"Description": "This is the name of the domain you are using eg. `mydomain.com`. Do NOT include subdomain qualifiers - no `www`!",
			"AllowedPattern": "^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9](?:\\.[a-zA-Z]{2,})+$"
		},
		"SubdomainName": {
			"Type": "String",
			"Description": "Name for the final URL to access foundry. Must be all lowercase, no letters, no spaces, and no symbols. eg. `foundry` will become `foundry.mydomain.com`",
			"AllowedPattern": "^[a-z]+$",
			"ConstraintDescription": "Must be all lowercase, no letters, no spaces, and no symbols.",
			"Default": "foundry"
		},
		"WebServerBool": {
			"Type": "String",
			"Description": "Set this to true if you would like your instance to act as the primary web server for your base domain as well as host Foundry.",
			"AllowedValues": [
				"True",
				"False"
			],
			"Default": "False"
		},
		"ConfigureRoute53Bool": {
			"Type": "String",
			"Description": "If you haven't set up Route53 before, leave this set to True. Set it to False if your Foundry DNS records already exist. Note: Sometimes CloudFormation doesn't remove existing Route53 Records, even if it set them up. Check Route53 if stack creation fails there.",
			"AllowedValues": [
				"True",
				"False"
			],
			"Default": "True"
		},
		"UseLetsEncryptSSL": {
			"Type": "String",
			"Description": "Run the LetsEncrypt SSL script. Set to False if you're testing, otherwise leave it at True to use https/SSL.",
			"AllowedValues": [
				"True",
				"False"
			],
			"Default": "True"
		},
		"Email": {
			"Type": "String",
			"Description": "A valid email address is required for LetsEncrypt SSL certificates.",
			"MinLength": 1,
			"ConstraintDescription": "Please enter a valid email address."
		},
		"InstanceKey": {
			"Type": "AWS::EC2::KeyPair::KeyName",
			"Description": "The SSH keypair used to access your instance. This MUST be created manually and stored in AWS EC2 / Key Pairs.",
			"ConstraintDescription": "See https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#having-ec2-create-your-key-pair"
		},
		"InstanceType": {
			"Type": "String",
			"Description": "EC2 server instance type. Pick a size based on estimated use and cost - if unsure, use `t4g.small` for light performance / cost saving. `m6`-class instances are fast but very expensive and probably not recommended unless you know you need them. See https://aws.amazon.com/ec2/pricing/on-demand/ for info.",
			"AllowedValues": [
				"t3a.small",
				"t3a.medium",
				"t4g.small",
				"t4g.medium",
				"m6a.large",
				"m6a.xlarge"
			],
			"Default": "t4g.small"
		},
		"AMI": {
			"Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
			"Description": "Managed AMI (operating system) image for the EC2. If you're using a `t4g` instance, leave it as 'arm64'. `t3` and `m6` instances MUST change this to `x86_64`.",
			"AllowedValues": [
				"/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-arm64",
				"/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64"
			],
			"Default": "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-arm64"
		},
		"UseFixedIP": {
			"Type": "String",
			"Description": "Allows you to have a dedicated public IP for your instance. This prevents the IP from changing everytime you shutdown the instance. EIPs have a conditional cost. If an EIP is in use, it is free. If the EIP is not in use a minimal cost is applied.",
			"AllowedValues": [
				"True",
				"False"
			],
			"Default": "False"
		},
		"SshAccessIP": {
			"Type": "String",
			"Description": "Will allow TCP port 22 (SSH) Inbound access for the given IP range. You MUST enter a range. For a single IP put /32 at the end. You likely want to use your public IP (https://www.whatsmyip.org/). Example of a valid entry: 123.45.67.89/32. If you leave this blank, no SSH rule will be configured. You can also set this manually later in the EC2 instance's Security Group",
			"Default": "",
			"ConstraintDescription": "Must be a valid IP/CIDR range."
		},
		"UseExistingS3Bucket": {
			"Type": "String",
			"Description": "If you have an S3 bucket already set up for Foundry, set this option to True. The S3 bucket must have a public access policy set. If you don't have a bucket set up, one will be created for you with the name specified next.",
			"AllowedValues": [
				"True",
				"False"
			],
			"Default": "False"
		},
		"S3BucketName": {
			"Type": "String",
			"Description": "Name for S3 bucket that will be created or used. This must be globally unique across all of AWS, so be a little creative. Must be all lowercase letters or numbers, no spaces, and no symbols expect dash (-).",
			"ConstraintDescription": "This must be globally unique across all of AWS, so be a little creative. Must be all lowercase letters or numbers, no spaces, and no symbols expect dash (-).",
			"AllowedPattern": "^[a-z|0-9]+([-|a-z|0-9]+)*[a-z|0-9]$"
		},
		"TakeSnapshots": {
			"Type": "String",
			"Description": "Select True if you want to take snapshots of your instance. This is recommended but comes with a minimal cost to store the snapshots. This will retain 5 snapshots by default. See https://aws.amazon.com/ebs/pricing/",
			"AllowedValues": [
				"True",
				"False"
			],
			"Default": "False"
		},
		"SnapshotFrequency": {
			"Description": "If taking instance snapshots, how often you want to take snapshots.",
			"Type": "String",
			"Default": "Weekly",
			"AllowedValues": [
				"Daily",
				"Weekly"
			]
		}
	},
	"Conditions": {
		"CreateSnapshots": {
			"Fn::Equals": [
				{
					"Ref": "TakeSnapshots"
				},
				"True"
			]
		},
		"HasSshIP": {
			"Fn::Not": [
				{
					"Fn::Equals": [
						"",
						{
							"Ref": "SshAccessIP"
						}
					]
				}
			]
		},
		"CreateWebServer": {
			"Fn::Equals": [
				{
					"Ref": "WebServerBool"
				},
				"True"
			]
		},
		"ConfigureRoute53": {
			"Fn::Equals": [
				{
					"Ref": "ConfigureRoute53Bool"
				},
				"True"
			]
		},
		"CreateWebServer": {
			"Fn::Equals": [
				{
					"Ref": "WebServerBool"
				},
				"True"
			]
		},
		"Route53WebServer": {
			"Fn::And": [
				{
					"Condition": "ConfigureRoute53"
				},
				{
					"Condition": "CreateWebServer"
				}
			]
		},
		"NoExistingS3": {
			"Fn::Equals": [
				{
					"Ref": "UseExistingS3Bucket"
				},
				"False"
			]
		},
		"CreateEIP": {
			"Fn::Equals": [
				{
					"Ref": "UseFixedIP"
				},
				"True"
			]
		},
		"DailyCheck": {
			"Fn::Equals": [
				{
					"Ref": "SnapshotFrequency"
				},
				"Daily"
			]
		},
		"WeeklyCheck": {
			"Fn::Equals": [
				{
					"Ref": "SnapshotFrequency"
				},
				"Weekly"
			]
		},
		"TakeSnapshots": {
			"Fn::Equals": [
				{
					"Ref": "TakeSnapshots"
				},
				"True"
			]
		}
	},
	"Resources": {
		"FoundryServerSG": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "-",
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"FromPort": 30000,
						"ToPort": 30000,
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
		},
		"SecurityGroupIngressVoice": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Fn::GetAtt": [
						"FoundryServerSG",
						"GroupId"
					]
				},
				"CidrIp": "0.0.0.0/0",
				"FromPort": 80,
				"IpProtocol": "tcp",
				"ToPort": 80
			}
		},
		"SecurityGroupIngressVoiceRange": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Fn::GetAtt": [
						"FoundryServerSG",
						"GroupId"
					]
				},
				"CidrIp": "0.0.0.0/0",
				"FromPort": 49152,
				"IpProtocol": "tcp",
				"ToPort": 65535
			}
		},
		"SecurityGroupIngressHTTP": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Fn::GetAtt": [
						"FoundryServerSG",
						"GroupId"
					]
				},
				"CidrIp": "0.0.0.0/0",
				"FromPort": 33478,
				"IpProtocol": "tcp",
				"ToPort": 33478
			}
		},
		"SecurityGroupIngressHTTPS": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Fn::GetAtt": [
						"FoundryServerSG",
						"GroupId"
					]
				},
				"CidrIp": "0.0.0.0/0",
				"FromPort": 443,
				"IpProtocol": "tcp",
				"ToPort": 443
			}
		},
		"SecurityGroupIngressSSH": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Condition": "HasSshIP",
			"Properties": {
				"GroupId": {
					"Fn::GetAtt": [
						"FoundryServerSG",
						"GroupId"
					]
				},
				"CidrIp": {
					"Ref": "SshAccessIP"
				},
				"FromPort": 22,
				"IpProtocol": "tcp",
				"ToPort": 22
			}
		},
		"Route53RSFoundry": {
			"Type": "AWS::Route53::RecordSet",
			"Condition": "ConfigureRoute53",
			"Properties": {
				"Name": {
					"Fn::Sub": "${SubdomainName}.${FullyQualifiedDomainName}"
				},
				"Type": "A",
				"HostedZoneName": {
					"Fn::Sub": "${FullyQualifiedDomainName}."
				},
				"ResourceRecords": [
					{
						"Fn::GetAtt": [
							"FoundryServer",
							"PublicIp"
						]
					}
				],
				"TTL": "60"
			}
		},
		"Route53RSWeb": {
			"Type": "AWS::Route53::RecordSet",
			"Condition": "Route53WebServer",
			"Properties": {
				"Name": {
					"Ref": "FullyQualifiedDomainName"
				},
				"Type": "A",
				"HostedZoneName": {
					"Fn::Sub": "${FullyQualifiedDomainName}."
				},
				"ResourceRecords": [
					{
						"Fn::GetAtt": [
							"FoundryServer",
							"PublicIp"
						]
					}
				],
				"TTL": "60"
			}
		},
		"Route53RSWebWWW": {
			"Type": "AWS::Route53::RecordSet",
			"Condition": "Route53WebServer",
			"Properties": {
				"Name": {
					"Fn::Sub": "www.${FullyQualifiedDomainName}"
				},
				"Type": "CNAME",
				"HostedZoneName": {
					"Fn::Sub": "${FullyQualifiedDomainName}."
				},
				"ResourceRecords": [
					{
						"Ref": "FullyQualifiedDomainName"
					}
				],
				"TTL": "60"
			}
		},
		"FoundryBucket": {
			"Condition": "NoExistingS3",
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"BucketName": {
					"Ref": "S3BucketName"
				},
				"OwnershipControls": {
					"Rules": [
						{
							"ObjectOwnership": "ObjectWriter"
						}
					]
				},
				"PublicAccessBlockConfiguration": {
					"BlockPublicAcls" : false,
					"BlockPublicPolicy" : false,
					"IgnorePublicAcls" : false,
					"RestrictPublicBuckets" : false
				},
				"CorsConfiguration": {
					"CorsRules": [
						{
							"AllowedOrigins": [
								"*"
							],
							"AllowedHeaders": [
								"*"
							],
							"AllowedMethods": [
								"GET",
								"POST",
								"HEAD"
							],
							"MaxAge": "3000"
						}
					]
				}
			}
		},
		"FoundryBucketPolicy": {
			"Condition": "NoExistingS3",
			"Type": "AWS::S3::BucketPolicy",
			"Properties": {
				"Bucket": {
					"Ref": "FoundryBucket"
				},
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Sid": "PublicReadGetObject",
							"Action": "s3:GetObject",
							"Effect": "Allow",
							"Principal": "*",
							"Resource": {
								"Fn::Sub": "arn:aws:s3:::${S3BucketName}/*"
							}
						}
					]
				}
			}
		},
		"AdminUser": {
			"Type": "AWS::IAM::User",
			"Properties": {
				"LoginProfile": {
					"Password": {
						"Ref": "AdminUserPW"
					}
				},
				"ManagedPolicyArns": [
					"arn:aws:iam::aws:policy/AdministratorAccess"
				],
				"UserName": {
					"Ref": "AdminUserName"
				}
			}
		},
		"UserKey": {
			"Type": "AWS::IAM::AccessKey",
			"Properties": {
				"Status": "Active",
				"UserName": {
					"Ref": "FoundryUser"
				}
			}
		},
		"FoundryUser": {
			"Type": "AWS::IAM::User",
			"Properties": {
				"Policies": [
					{
						"PolicyName": "S3Foundry",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Sid": "ManageObjects",
									"Effect": "Allow",
									"Action": [
										"s3:PutObject",
										"s3:GetObject",
										"s3:ListBucket",
										"s3:DeleteObject",
										"s3:PutObjectAcl"
									],
									"Resource": [
										{
											"Fn::Sub": "arn:aws:s3:::${S3BucketName}/*"
										},
										{
											"Fn::Sub": "arn:aws:s3:::${S3BucketName}"
										}
									]
								},
								{
									"Sid": "ListBuckets",
									"Effect": "Allow",
									"Action": "s3:ListAllMyBuckets",
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"FoundryServer": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"config": {
						"users": {
							"foundry": {
								"uid": "182",
								"homeDir": "/home/foundry"
							}
						},
						"files": {
							"/tmp/foundry-setup.log": {
								"content": "===== STARTING INSTALL =====\n"
							},
							"/foundryssl/variables.sh": {
								"content": {
									"Fn::Join": [
										"",
										[
											"#!/bin/bash\n",
											"foundry_user=foundry\n",
											"foundry_home=/foundrydata\n",
											"region=",
											{
												"Ref": "AWS::Region"
											},
											"\n",
											"fqdn=",
											{
												"Ref": "FullyQualifiedDomainName"
											},
											"\n",
											"subdomain=",
											{
												"Ref": "SubdomainName"
											},
											"\n",
											"email=",
											{
												"Ref": "Email"
											},
											"\n",
											"webserver_bool=",
											{
												"Ref": "WebServerBool"
											},
											"\n",
											"enable_letsencrypt=",
											{
												"Ref": "UseLetsEncryptSSL"
											},
											"\n"
										]
									]
								},
								"mode": "000700",
								"owner": "root",
								"group": "root"
							},
							"/foundryssl/variables_tmp.sh": {
								"content": {
									"Fn::Join": [
										"",
										[
											"#!/bin/bash\n",
											"foundry_download_link='",
											{
												"Ref": "FoundryDownloadLink"
											},
											"'\n",
											"access_key_id=",
											{
												"Ref": "UserKey"
											},
											"\n",
											"secret_access_key=",
											{
												"Fn::GetAtt": [
													"UserKey",
													"SecretAccessKey"
												]
											}
										]
									]
								},
								"mode": "000700",
								"owner": "root",
								"group": "root"
							},
							"/etc/awslogs/awscli.conf": {
								"content": {
									"Fn::Join": [
										"",
										[
											"[plugins]\n",
											"cwlogs = cwlogs\n",
											"[/tmp/foundry-setup.log]\n",
											"[default]\n",
											"region = ",
											{
												"Ref": "AWS::Region"
											},
											"\n"
										]
									]
								},
								"mode": "000700",
								"owner": "root",
								"group": "root"
							}
						},
						"commands": {
							"A_Install_Git": {
								"command": "sudo dnf install -y git"
							},
							"B_Clone_Repo": {
								"command": "sudo git clone https://github.com/takamuffin/aws-foundry-ssl.git",
								"cwd": "/"
							},
							"C_Start_Install": {
								"command": "sudo bash /aws-foundry-ssl/setup/install.sh",
								"cwd": "/"
							}
						}
					}
				}
			},
			"CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT25M"
                }
            },
			"Properties": {
				"KeyName": {
					"Ref": "InstanceKey"
				},
				"ImageId": {
					"Ref": "AMI"
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"IamInstanceProfile": {
					"Ref": "InstanceProfile"
				},
				"SecurityGroupIds": [
					{
						"Ref": "FoundryServerSG"
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": "FoundryServer"
					}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"",
							[
								"#!/bin/bash -x\n",
								"AWS_AVAIL_ZONE=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone)\n",
								"AWS_REGION=${AWS_AVAIL_ZONE::-1}\n",
								"AWS_INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)\n",
								"ROOT_VOLUME_IDS=$(aws ec2 describe-instances --region $AWS_REGION --instance-id $AWS_INSTANCE_ID --output text --query Reservations[0].Instances[0].BlockDeviceMappings[0].Ebs.VolumeId)\n",
								"aws ec2 create-tags --resources ${ROOT_VOLUME_IDS} --region $AWS_REGION --tags Key=Snapshot,Value=true\n",
								"# Install the files and packages from the metadata\n",
								"/opt/aws/bin/cfn-init -v ",
								"         --stack ",
								{
									"Ref": "AWS::StackName"
								},
								"         --resource FoundryServer ",
								"         --region ",
								{
									"Ref": "AWS::Region"
								},
								"\n",
								"# Signal the status from cfn-init\n",
								"/opt/aws/bin/cfn-signal -e $? ",
								"         --stack ",
								{
									"Ref": "AWS::StackName"
								},
								"         --resource FoundryServer ",
								"         --region ",
								{
									"Ref": "AWS::Region"
								}
							]
						]
					}
				}
			},
			"DependsOn": "UserKey"
		},
		"InstanceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"ec2.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Policies": [
					{
						"PolicyName": "EC2Manager",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Sid": "VisualEditor0",
									"Effect": "Allow",
									"Action": [
										"ec2:DescribeInstances",
										"ec2:CreateTags",
										"route53:ListResourceRecordSets",
										"route53:ChangeResourceRecordSets",
										"route53:ListHostedZones",
										"logs:CreateLogGroup",
										"logs:CreateLogStream",
										"logs:PutLogEvents",
										"logs:DescribeLogStreams",
										"logs:PutRetentionPolicy"
									],
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Roles": [
					{
						"Ref": "InstanceRole"
					}
				]
			}
		},
		"InstanceEIP": {
			"Condition": "CreateEIP",
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"InstanceId": {
					"Ref": "FoundryServer"
				}
			}
		},
		"SnapshotPolicy": {
			"Condition": "CreateSnapshots",
			"Type": "AWS::DLM::LifecyclePolicy",
			"Properties": {
				"State": "ENABLED",
				"Description": "Foundry Server snapshot policy",
				"ExecutionRoleArn": {
					"Fn::GetAtt": [
						"InstanceRole",
						"Arn"
					]
				},
				"PolicyDetails": {
					"PolicyType": "EBS_SNAPSHOT_MANAGEMENT",
					"ResourceTypes": [
						"VOLUME"
					],
					"TargetTags": [
						{
							"Key": "Snapshot",
							"Value": "true"
						}
					],
					"Schedules": [
						{
							"Fn::If": [
								"DailyCheck",
								{
									"Name": "Snapshots",
									"CreateRule": {
										"CronExpression": "cron(0 12 * * ? *)"
									},
									"RetainRule": {
										"Count": 5
									},
									"CopyTags": true
								},
								{
									"Name": "Snapshots",
									"CreateRule": {
										"CronExpression": "cron(0 12 ? * 2 *)"
									},
									"RetainRule": {
										"Count": 5
									},
									"CopyTags": true
								}
							]
						}
					]
				}
			}
		}
	}
}
